/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package org.example

import WhilelangLexer
import WhilelangParser
import org.antlr.v4.runtime.CharStreams
import org.antlr.v4.runtime.CommonTokenStream
import org.example.cfg.CfgBuildVisitor
import org.example.cfg.CfgNode
import org.example.cfg.draw
import org.example.lva.liveVariableAnalysis

fun main() {
    val text = "print \"Fibonacci Sequence\";\n" +
            "c := 1000;\n" +
            "print c;\n" +
            "a := 0;\n" +
            "b := 1;\n" +
            "while b <= 1000000 do {\n" +
            "  print b;\n" +
            "  b := a + b;\n" +
            "  a := b - a\n" +
            "}"

    val charStream = CharStreams.fromString(text);
    val lexer = WhilelangLexer(charStream);
    val tokens = CommonTokenStream(lexer)
    val parser = WhilelangParser(tokens)
    val ret = CfgBuildVisitor().visit(parser.program())

    liveVariableAnalysis(ret[0])
    ret.forEach(CfgNode::printVerbose)

    print(draw(ret[0], showLive = true).dot())
}
